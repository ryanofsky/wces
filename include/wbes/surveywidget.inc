<?

require_once("widgets/basic.inc");

define("SurveyWidget_save",1);
define("SurveyWidget_cancel",2);
define("SurveyWidget_next",3);
define("SurveyWidget_previous",4);

class SurveyWidget extends FormWidget
{
//public:

  var $finished = false;
  var $failure = false; // failure on save

//private:

  var $topic_id;
  var $base_branch_id;
  var $user_id;
  var $question_period_id;
  var $factories;
  var $anonymous = false;
  var $replacements = false;

  var $action; // ActionButton widget
  var $form; // Form widget
  var $showerrors = false; 
  var $survey = NULL;
  var $questionwidgets;
  var $page = 0;
  var $backup = true;
  var $sawlastpage = false;
  var $message = "";
  var $save_id = false;


  // to add a ta section to the survey, assign an instance of TASurvey to this: 
  // $abc = new SurveyWidget(...);
  // $abc->ta = new TASurvey(...);
  var $ta = null;

  function SurveyWidget($topic_id, $base_branch_id, $user_id, $question_period_id, $factories, $prefix, $form, $formmethod)
  {
    $this->FormWidget($prefix, $form, $formmethod);
    $this->topic_id           = (int)$topic_id;
    $this->base_branch_id     = (int)$base_branch_id;
    $this->user_id            = (int)$user_id;
    $this->question_period_id = (int)$question_period_id;
    $this->factories          = $factories;

    $this->action = new ActionButton("${prefix}_action",$form,$formmethod);
    $this->form = new Form("${prefix}_form",$form,$formmethod);
  }

  function loadvalues()
  {
    $this->page = (int)$this->loadattribute("page");
    $this->showerrors = (bool)$this->loadattribute("showerrors");
    $this->sawlastpage = (bool)$this->loadattribute("sawlastpage");
    if (!$this->survey)
    {
      $this->survey = unserialize((string)$this->loadattribute("survey"));
      if (get_class($this->survey) != "survey")
        $this->load();
    }

    $this->questionwidgets = array();
    $page = 0;
    foreach(array_keys($this->survey->components) as $k)
    {
      if ("pagebreak" == get_class($this->survey->components[$k])) ++$page;
      $c = $this->survey->components[$k]->getwidget("{$this->prefix}_$k",$this->form, $this->formmethod);
      $c->page = $page;
      $this->questionwidgets[] = $c;
    }

    if ($this->ta)
    {
      $this->ta->page = $page;
      $this->questionwidgets[] = &$this->ta;
    }

    $this->pages = $page;

    $this->form->loadvalues();
    if($this->form->isstale)
    {
      foreach(array_keys($this->questionwidgets) as $key)
        $this->questionwidgets[$key]->loadvalues();

      $this->action->loadvalues();
      $this->handleactions();
    }
    
    if (count($this->questionwidgets) == 0)
    {
      $this->message = "<p><font color=red>Survey is empty.</font></p>";
      $this->finished = true;
      return;
    }
  }

  function handleactions()
  {
    if ($this->action->action == SurveyWidget_save)
      $this->save();
    else if ($this->action->action == SurveyWidget_cancel)
    {
      $this->message = "<p><font color=red>Responses Not Saved</font></p>";
      $this->finished = true;
    }
    else if ($this->action->action == SurveyWidget_next)
      ++$this->page;
    else if ($this->action->action == SurveyWidget_previous)
      --$this->page;

    $this->action->action = "";
    $this->action->object = "";
  }

  function load()
  {
    global $wbes;
    wbes_connect();
    $this->survey = new Survey();
    $this->survey->load($this->topic_id,$this->base_branch_id,$this->factories,$this->save_id);
  }

  function save()
  {
    global $wbes, $HTTP_POST_VARS, $server_feedback;

    $anonymous = $this->anonymous; // todo: decide how to make this this configurable
    global $wbes;

    $this->showerrors = true;
    foreach(array_keys($this->questionwidgets) as $key)
      if (count($this->questionwidgets[$key]->errors) > 0) return;

    wbes_connect();
    $sql = "BEGIN;\n";
    if ($anonymous)
    {
      $sql .= "INSERT INTO survey_responses(revision_id, question_period_id, response_id, topic_id, user_id) VALUES ({$this->survey->orig_id}, $this->question_period_id, NULL, $this->topic_id, $this->user_id);\n";
      $sql .= "INSERT INTO survey_responses(revision_id, question_period_id, date, topic_id) VALUES ({$this->survey->orig_id}, $this->question_period_id, NULL, $this->topic_id);\n";
    }
    else
      $sql .= "INSERT INTO survey_responses(revision_id, question_period_id, topic_id, user_id) VALUES ({$this->survey->orig_id}, $this->question_period_id, $this->topic_id, $this->user_id);\n";

    $sql .= "SELECT currval('response_ids')";
    $result = pg_go($sql, $wbes, __FILE__, __LINE__);

    $response_id = (int)pg_result($result, 0, 0);

    $failure = false;

    foreach(array_keys($this->questionwidgets) as $key)
      $failure = $failure || !$this->questionwidgets[$key]->save($response_id);

    $fields = "'" . addslashes(serialize($HTTP_POST_VARS)) . "'";

    // temporary, ensure that even if results not saved correctly, they will still
    // be recoverable
    //
    // CREATE TABLE safe_backup (
    //   user_id INTEGER,
    //   topic_id INTEGER,
    //   question_period_id INTEGER,
    //   date DATETIME DEFAULT 'now',
    //   form_vals TEXT
    // );
    //
    if ($this->backup)
    {
      $failure = $failure || !pg_go("
        INSERT INTO safe_backup (user_id, topic_id, question_period_id, form_vals)
        VALUES ($this->user_id, $this->topic_id, $this->question_period_id, $fields)
      ", $wbes, __FILE__, __LINE__);
    }

    if ($failure)
      pg_go("ROLLBACK", $wbes, __FILE__, __LINE__);
    else
      $failure = $failure || !pg_go("COMMIT", $wbes, __FILE__, __LINE__);

    if ($failure)
    {
      $this->failure = true;
      print('<p><strong><font size="+2"><font color=red>Warning:</font> Errors were encountered during the save process. Please report this to <a href="mailto:' . $server_feedback . '">' . $server_feedback . '</a>. Include your user name and text of any error messages that preceded this one.</font></strong></p>' . "\n");
    }
    else
      $this->message = "<p><font color=blue>Responses Saved</font></p>";      

    $this->finished = true;
  }

  function display()
  {
    global $wces_path;

    $this->printattribute("page", $this->page);

    if ($this->failure) return;

    $this->form->display();
    $this->action->display();

    $this->printattribute("survey",serialize($this->survey));

    if ($this->ta && $this->ta->modal)
    {
      foreach(array_keys($this->questionwidgets) as $k)
      {
        $q = &$this->questionwidgets[$k];
        $q->display(!isset($q->modal) || !$q->modal);
      }
      return;
    }

    $this->printattribute("showerrors",(int)$this->showerrors);
    if ($this->form->isstale) $this->optionbar();

    print("<p>Instructions: Fill in the form below and press the \"Submit Evaluation\" button when you are done. Note that you will not be able to go back and edit any part of the evaluation once it is submitted. This includes the comments section and the TA section.</p>");

    if ($this->showerrors)
    {
      $errortext = "";
      foreach($this->questionwidgets as $questionwidget)
        if (isset($questionwidget->errors))
        foreach($questionwidget->errors as $error)
          $errortext .= "  <li>$error</li>\n";
      if ($errortext) print("<p><strong>The form is not complete. The missing fields are highlighted in <font color=red>red</font>.</strong></p>\n<ul>\n$errortext</ul>\n");
    }
    if ($this->action->action) $this->action->display();

    foreach(array_keys($this->questionwidgets) as $i)
    {
      $q = &$this->questionwidgets[$i];
      if ($q->page == $this->page)
      {
        print("<div>");
        if ($this->replacements) ob_start();
        $q->display(false, $this->showerrors);
        if ($this->replacements)
        {
          $contents = ob_get_contents();
          ob_end_clean();
          print(str_replace(array_keys($this->replacements), array_values($this->replacements), $contents));
        }
        
        print("</div>\n<br>\n");
      }
      else
        $q->display(true);
    }

    print("<p>&nbsp;</p>\n");
    $this->optionbar();

    $this->printattribute("sawlastpage", (int)$this->sawlastpage);
  }

  function optionbar()
  {
    global $wces_path;

    $prev = $this->page > 0;
    $next = $this->page < $this->pages && $this->pages > 0;
    if (!$next) $this->sawlastpage = true;
    $save = ((bool)$this->user_id) && $this->sawlastpage;

    if ($save || $prev || $next)
    {
?>
<table width="100%" cellpadding=5 cellspacing=0>
<tr>
  <td align=center bgcolor="#68ACFF">
    <? if ($prev) $this->action->display("Previous Page", SurveyWidget_previous, false, ""); ?>
    <? if ($next) $this->action->display("Next Page", SurveyWidget_next, false, ""); ?>
    <? if ($save) $this->action->display("Submit Evaluation", SurveyWidget_save, false, ""); ?>
    <? if ($save) $this->action->display("Cancel", SurveyWidget_cancel, false, " onclick=\"return confirm('You survey responses will be not be saved if you continue.\\n\\nPress OK to continue, or Cancel to keep filling out the survey.');\""); ?>
  </td>
</tr>
</table>
<?
    }
  }
}

?>
