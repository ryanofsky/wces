Installation Instructions (AcIS)
----------------------------------------------------

  The component works by downloading a page from 
  AcIS's servers which is protected by the AcIs'
  CheeseWhiz authentication system. (See
  http://www.columbia.edu/acis/rad/authmethods/cheesewhiz/
  for more information about that.)

  I have already set up one page like this at
  https://www1.columbia.edu/~rey4/info.html
  but it is easy enough to set up another. Here's
  how you do it:

  1) Login to cunix

  2) Create a secure_html folder if you do not
     already have one.

  3) Upload the '.htaccess' file and the 'info.html'
     from the src/secure_html folder. These can
     be placed anywhere in the secure_html folder,
     but they must be together in the same path.

     Optionally, you can create your own .htaccess
     file. See the Cheesewhiz documentation for
     more information.
     
  4) Give the world permission to read from
     secure_html by typing

     chmod -R u=rwX,g=rX,o=rX,w=rX ~username/secure_html

     [ substitute your own username above.. ]

  5) When calling the component from your coldfusion
     page or application, make sure to reference
     the file that you have uploaded to
     secure_html

Compilation Instructions (Visual C++ 6)
----------------------------------------------------
 
1) Download the latest source release of openssl
   from http://www.openssl.org/

2) Download the cURL source code from
   http://curl.haxx.se

3) Extract both archives to the location of your
   choice. Locations will henceforth be called

     <openssl folder>
     <curl folder>

4) Follow the openssl compilation instructions in
   <openssl folder>/INSTALL.W32

   (If you get error C2220 like I did, just remove
   the /WX switch from line 19 of the
   <openssl folder>/ms/ntdll.mak makefile.)

5) Start Visual C++. Go to Tools -> Options -> 
   Directories. Add these paths to the include
   locations:

   <openssl folder>/inc32
   <curl folder>/include

   Then add this path to the list of library 
   locations:

   <openssl folder>/out32dll

6) Open the workspace file src/affilgrab.dsw 
   that was included in this archive.

7) In the workspace view under the file tab, right
   click the tree item called "libcurl files" and
   choose "Add files to project" on the menu that
   comes up. In the file dialog box that appears,
   navigate to <curl folder>/lib and select all of
   the .c and .h files to add them to the project.

8) To build libcurl, right click "libcurl files"
   in the workspace view file tab and choose
   "Set as active project" Then go to Build ->
   Build libcurl.lib

9) To build the aflgrab dll, make that project
   active and choose Build -> Build aflgrab.dll
